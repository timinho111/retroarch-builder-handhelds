name: Build Portable RetroArch for Miyoo Flip

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up Docker's cross-platform build tools
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 2: Dynamically create the Dockerfile and then build the image
      - name: Create Dockerfile and Build Environment
        run: |
          cat <<'EOF' > Dockerfile
          # Use Debian Buster for ARM64 as the base image
          FROM arm64v8/debian:buster

          # Set environment variables
          ENV DEBIAN_FRONTEND=noninteractive CMAKE_VERSION=3.26.4

          # Install all system dependencies
          RUN apt-get update && \
              apt-get install -y --no-install-recommends \
                  build-essential \
                  git \
                  wget \
                  python3 \
                  python3-pip \
                  ninja-build \
                  pkg-config \
                  libudev-dev \
                  libdrm-dev \
                  libegl1-mesa-dev \
                  libgles2-mesa-dev \
                  libgl1-mesa-dev \
                  libasound2-dev \
                  libgbm-dev \
                  zlib1g-dev \
                  libpng-dev \
                  libsdl2-dev && \
              ln -s /usr/include/libdrm /usr/include/drm && \
              apt-get clean && rm -rf /var/lib/apt/lists/*

          # Manually install a modern version of CMake
          RUN cd /tmp && \
              wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-aarch64.sh && \
              chmod +x cmake-${CMAKE_VERSION}-linux-aarch64.sh && \
              ./cmake-${CMAKE_VERSION}-linux-aarch64.sh --skip-license --prefix=/usr/local && \
              rm -f cmake-${CMAKE_VERSION}-linux-aarch64.sh

          # Manually build and install SDL2
          RUN cd /tmp && \
              git clone --depth=1 https://github.com/libsdl-org/SDL.git && \
              cd SDL && \
              mkdir build && cd build && \
              cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DSDL_STATIC=OFF -DSDL_VIDEO_WAYLAND=OFF -DSDL_VIDEO_X11=OFF -DSDL_VIDEO_KMSDRM=ON && \
              make -j4 && \
              make install && \
              ldconfig && \
              cd / && rm -rf /tmp/SDL

          # Build RetroArch v1.21.0
          RUN cd /tmp && \
              git clone https://github.com/libretro/RetroArch.git && \
              cd RetroArch && \
              git checkout v1.21.0 && \
              export CFLAGS="-O2 -march=armv8-a -mtune=cortex-a55 -s" && \
              export LDFLAGS="-s" && \
              ./configure \
                --enable-kms \
                --enable-egl \
                --enable-opengles \
                --enable-udev \
                --enable-alsa \
                --disable-x11 \
                --disable-wayland && \
              make -j4

          # Create a clean, portable output directory structure
          RUN mkdir -p /build_output/RetroArch/.retroarch/cores && \
              mkdir -p /build_output/RetroArch/.retroarch/saves && \
              mkdir -p /build_output/RetroArch/.retroarch/states && \
              mkdir -p /build_output/RetroArch/.retroarch/system && \
              mkdir -p /build_output/RetroArch/.retroarch/assets && \
              mkdir -p /build_output/RetroArch/.retroarch/overlays && \
              # Copy the compiled binary and the config file into the main folder
              cp /tmp/RetroArch/retroarch /build_output/RetroArch/ && \
              cp /tmp/RetroArch/retroarch.cfg /build_output/RetroArch/ && \
              # Use sed to automatically update the default paths in the config file
              sed -i 's/^#\s*core_assets_directory.*$/core_assets_directory = ".\/.retroarch\/assets"/' /build_output/RetroArch/retroarch.cfg && \
              sed -i 's/^#\s*core_directory.*$/core_directory = ".\/.retroarch\/cores"/' /build_output/RetroArch/retroarch.cfg && \
              sed -i 's/^#\s*savefile_directory.*$/savefile_directory = ".\/.retroarch\/saves"/' /build_output/RetroArch/retroarch.cfg && \
              sed -i 's/^#\s*savestate_directory.*$/savestate_directory = ".\/.retroarch\/states"/' /build_output/RetroArch/retroarch.cfg && \
              sed -i 's/^#\s*system_directory.*$/system_directory = ".\/.retroarch\/system"/' /build_output/RetroArch/retroarch.cfg && \
              sed -i 's/^#\s*overlay_directory.*$/overlay_directory = ".\/.retroarch\/overlays"/' /build_output/RetroArch/retroarch.cfg
          EOF

          # Now, build the Docker image from the file we just created
          docker build -t my-build-env .

      # Extract the final portable folder from the image
      - name: Extract Portable RetroArch Folder
        run: |
          mkdir -p artifacts
          docker create --name temp_container my-build-env
          docker cp temp_container:/build_output/RetroArch/. artifacts/
          docker rm temp_container

      # Upload the final folder as a downloadable artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RetroArch_Portable_v1.21.0
          path: artifacts/
