name: Build RetroArch for TrimUI Smart Pro (Brick) - DIAGNOSTIC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # Use a stable LTS version of Ubuntu for reliable multi-arch support
    runs-on: ubuntu-22.04

    steps:
    # STEP 1: Set up a correctly scoped Multi-Arch build environment
    - name: Setup Multi-Arch Environment
      run: |
        sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
        sudo dpkg --add-architecture arm64
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
        sudo apt-get update

    # STEP 2: Download the Official Arm Compiler Toolchain
    - name: Download and Setup Arm GNU Toolchain
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
        mkdir -p ${{ github.workspace }}/arm-toolchain
        tar -xf arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz -C ${{ github.workspace }}/arm-toolchain --strip-components=1
        echo "${{ github.workspace }}/arm-toolchain/bin" >> $GITHUB_PATH

    # STEP 3: Install All Host and Target (arm64) Dependencies
    - name: Install Host and Target Dependencies
      run: |
        sudo apt-get install -y build-essential pkg-config git
        sudo apt-get install -y \
          libegl-dev:arm64 \
          libgles2-mesa-dev:arm64 \
          libudev-dev:arm64 \
          libasound2-dev:arm64 \
          libgbm-dev:arm64 \
          libsystemd-dev:arm64 \
          libdrm-dev:arm64 \
          libxkbcommon-dev:arm64 \
          libfreetype6-dev:arm64 \
          libgl1-mesa-dev:arm64 \
          zlib1g-dev:arm64

    # ==========================================================================
    # STEP 4: Run Diagnostic Probe and Attempt Configuration
    # ==========================================================================
    - name: Run Diagnostic Probe and Attempt Configuration
      run: |
        git clone https://github.com/libretro/RetroArch.git
        cd RetroArch
        git checkout v1.21.0
        
        # Create a self-contained wrapper script to run configure
        cat <<'EOF' > run_configure.sh
        #!/bin/bash
        set -x  # Enable debug printing to see every command being run

        echo "--- ENVIRONMENT VERIFICATION ---"
        export CC=aarch64-none-linux-gnu-gcc
        export CXX=aarch64-none-linux-gnu-g++
        export AR=aarch64-none-linux-gnu-ar
        export STRIP=aarch64-none-linux-gnu-strip
        export PKG_CONFIG=/usr/bin/pkg-config
        export PKG_CONFIG_SYSROOT_DIR=/
        export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
        export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu
        
        env | sort
        
        echo "--- COMPILER CHECK ---"
        which ${CC}
        ${CC} --version
        
        echo "--- PKG-CONFIG CHECK ---"
        which ${PKG_CONFIG}
        ${PKG_CONFIG} --version

        echo "--- CHECKING FOR EGL.PC ---"
        # Test if pkg-config can find the egl.pc file and print its contents
        if [[ -f "/usr/lib/aarch64-linux-gnu/pkgconfig/egl.pc" ]]; then
            echo "SUCCESS: egl.pc exists"
            cat /usr/lib/aarch64-linux-gnu/pkgconfig/egl.pc
        else
            echo "FAILURE: egl.pc DOES NOT EXIST"
        fi
        
        echo "--- CHECKING FOR EGL.H HEADER FILE ---"
        # Test if the egl.h file exists on the filesystem
        if [[ -f "/usr/include/aarch64-linux-gnu/EGL/egl.h" ]]; then
            echo "SUCCESS: egl.h exists"
            ls -l /usr/include/aarch64-linux-gnu/EGL/egl.h
        else
            echo "FAILURE: egl.h DOES NOT EXIST"
        fi

        echo "--- ATTEMPTING CONFIGURE ---"
        ./configure \
          --host=aarch64-none-linux-gnu \
          --disable-x11 --disable-wayland --disable-pulse \
          --enable-opengles --enable-egl --enable-kms --enable-freetype
        EOF
        
        # Make the wrapper script executable and run it
        chmod +x run_configure.sh
        ./run_configure.sh
